# Valid values are: debug, info, warn, error, fatal, panic
LOGGER_LEVEL: info

KAFKA_BROKERS: [ ]
KAFKA_CLIENTID: "kminion"
KAFKA_RACKID: ""


KAFKA_TLS_ENABLED: false
KAFKA_TLS_CAFILEPATH: ""
KAFKA_TLS_CERTFILEPATH: ""
KAFKA_TLS_KEYFILEPATH: ""
KAFKA_TLS_PASSPHRASE: ""
KAFKA_TLS_INSECURESKIPTLSVERIFY: false


# Whether or not SASL authentication will be used for authentication
KAFKA_SASL_ENABLED: false

# Username to use for PLAIN or SCRAM mechanism
KAFKA_SASL_USERNAME: ""

# Password to use for PLAIN or SCRAM mechanism
KAFKA_SASL_PASSWORD: ""

# Mechanism to use for SASL Authentication. Valid values are PLAIN, SCRAM-SHA-256, SCRAM-SHA-512, GSSAPI
KAFKA_SASL_MECHANISM: "PLAIN"

# GSSAPI / Kerberos config properties
KAFKA_SASL_GSSAPI_AUTHTYPE: ""
KAFKA_SASL_GSSAPI_KEYTABPATH: ""
KAFKA_SASL_GSSAPI_KERBEROSCONFIGPATH: ""
KAFKA_SASL_GSSAPI_SERVICENAME: ""
KAFKA_SASL_GSSAPI_USERNAME: ""
KAFKA_SASL_GSSAPI_PASSWORD: ""
KAFKA_SASL_GSSAPI_REALM: ""
KAFKA_SASL_GSSAPI_ENABLEFAST: true


# Enabled specifies whether consumer groups shall be scraped and exported or not.
MINION_CONSUMERGROUPS_ENABLED: true

# Mode specifies whether we export consumer group offsets using the Admin API or by consuming the internal
# __consumer_offsets topic. Both modes have their advantages and disadvantages.
# * adminApi:
#     - Useful for managed kafka clusters that do not provide access to the offsets topic.
# * offsetsTopic
#     - Enables kminion_kafka_consumer_group_offset_commits_total metrics.
#     - Processing the offsetsTopic requires slightly more memory and cpu than using the adminApi. The amount depends on the
#       size and throughput of the offsets topic.
MINION_CONSUMERGROUPS_SCRAPEMODE: adminApi # Valid values: adminApi, offsetsTopic
    
# Granularity can be per topic or per partition. If you want to reduce the number of exported metric series and
# you aren't interested in per partition lags you could choose "topic" where all partition lags will be summed
# and only topic lags will be exported.
MINION_CONSUMERGROUPS_GRANULARITY: partition
    
# AllowedGroups are regex strings of group ids that shall be exported
# You can specify allowed groups by providing literals like "my-consumergroup-name" or by providing regex expressions
# like "/internal-.*/".
MINION_CONSUMERGROUPS_ALLOWEDGROUPS: [ ".*" ]

# IgnoredGroups are regex strings of group ids that shall be ignored/skipped when exporting metrics. Ignored groups
# take precedence over allowed groups.
MINION_CONSUMERGROUPS_IGNOREDGROUPS: [ ]


# Granularity can be per topic or per partition. If you want to reduce the number of exported metric series and
# you aren't interested in per partition metrics you could choose "topic".
MINION_TOPICS_GRANULARITY: partition

# AllowedTopics are regex strings of topic names whose topic metrics that shall be exported.
# You can specify allowed topics by providing literals like "my-topic-name" or by providing regex expressions
# like "/internal-.*/".
MINION_TOPICS_ALLOWEDTOPICS: [ ".*" ]

# IgnoredTopics are regex strings of topic names that shall be ignored/skipped when exporting metrics. Ignored topics
# take precedence over allowed topics.
MINION_TOPICS_IGNOREDTOPICS: [ ]
    
# infoMetric is a configuration object for the kminion_kafka_topic_info metric
# ConfigKeys are set of strings of Topic configs that you want to have exported as part of the metric
MINION_TOPICS_INFOMETRIC_CONFIGKEYS: [ "cleanup.policy" ]

# Enabled specifies whether log dirs shall be scraped and exported or not. This should be disabled for clusters prior
# to version 1.0.0 as describing log dirs was not supported back then.
MINION_TOPICS_LOGDIRS_ENABLED: true

# EndToEnd Metrics
# When enabled, kminion creates a topic which it produces to and consumes from, to measure various advanced metrics. See docs for more info
MINION_ENDTOEND_ENABLED: false

# How often to send end-to-end test messages
MINION_ENDTOEND_PROBEINTERVAL: 100ms

# You can disable topic management, without disabling the testing feature.
# Only makes sense if you have multiple kminion instances, and for some reason only want one of them to create/configure the topic
MINION_ENDTOEND_TOPICMANAGEMENT_ENABLED: true

# Name of the topic kminion uses to send its test messages
# You do *not* need to change this if you are running multiple kminion instances on the same cluster.
# Different instances are perfectly fine with sharing the same topic!
MINION_ENDTOEND_TOPICMANAGEMENT_NAME: kminion-end-to-end

# How often kminion checks its topic to validate configuration, partition count, and partition assignments
MINION_ENDTOEND_TOPICMANAGEMENT_RECONCILIATIONINTERVAL: 10m

# Depending on the desired monitoring (e.g. you want to alert on broker failure vs. cluster that is not writable)
# you may choose replication factor 1 or 3 most commonly.
MINION_ENDTOEND_TOPICMANAGEMENT_REPLICATIONFACTOR: 1

# Rarely makes sense to change this, but maybe if you want some sort of cheap load test?
# By default (1) every broker gets one partition
MINION_ENDTOEND_TOPICMANAGEMENT_PARTITIONSPERBROKER: 1


# This defines:
# - Maximum time to wait for an ack response after producing a message
# - Upper bound for histogram buckets in "produce_latency_seconds"
MINION_ENDTOEND_PRODUCER_ACKSLA: 5s

# Can be to "all" (default) so kafka only reports an end-to-end test message as acknowledged if
# the message was written to all in-sync replicas of the partition.
# Or can be set to "leader" to only require to have written the message to its log.
MINION_ENDTOEND_PRODUCER_REQUIREDACKS: all


# Prefix kminion uses when creating its consumer groups. Current kminion instance id will be appended automatically
MINION_ENDTOEND_CONSUMER_GROUPIDPREFIX: kminion-end-to-end

# Whether KMinion should try to delete empty consumer groups with the same prefix. This can be used if you want
# KMinion to cleanup it's old consumer groups. It should only be used if you use a unique prefix for KMinion.
MINION_ENDTOEND_CONSUMER_DELETESTALECONSUMERGROUPS: false

# This defines:
# - Upper bound for histogram buckets in "roundtrip_latency"
# - Time limit beyond which a message is considered "lost" (failed the roundtrip)
MINION_ENDTOEND_CONSUMER_ROUNDTRIPSLA: 20s

# - Upper bound for histogram buckets in "commit_latency_seconds"
# - Maximum time an offset commit is allowed to take before considering it failed
MINION_ENDTOEND_CONSUMER_COMMITSLA: 10s

# Namespace is the prefix for all exported Prometheus metrics
EXPORTER_NAMESPACE: "kminion"

# Host that shall be used to bind the HTTP server on
EXPORTER_HOST: ""

# Port that shall be used to bind the HTTP server on
EXPORTER_PORT: 8080
